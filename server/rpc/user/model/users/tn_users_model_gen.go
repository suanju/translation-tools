// Code generated by goctl. DO NOT EDIT.

package users

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tnUsersFieldNames          = builder.RawFieldNames(&TnUsers{})
	tnUsersRows                = strings.Join(tnUsersFieldNames, ",")
	tnUsersRowsExpectAutoSet   = strings.Join(stringx.Remove(tnUsersFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tnUsersRowsWithPlaceHolder = strings.Join(stringx.Remove(tnUsersFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	tnUsersModel interface {
		Insert(ctx context.Context, data *TnUsers) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TnUsers, error)
		FindOneByEmail(ctx context.Context, email string) (*TnUsers, error)
		Update(ctx context.Context, data *TnUsers) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTnUsersModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TnUsers struct {
		Id           int64        `db:"id"`            // id
		Email        string       `db:"email"`         // 邮箱
		Password     string       `db:"password"`      // 密码
		PasswordSalt string       `db:"password_salt"` // 密码盐
		Status       int64        `db:"status"`        // 用户状态 0->未激活 1->已激活 2->禁用
		CreateAt     time.Time    `db:"create_at"`     // 创建时间
		UpdateAt     sql.NullTime `db:"update_at"`     // 更新时间
	}
)

func newTnUsersModel(conn sqlx.SqlConn) *defaultTnUsersModel {
	return &defaultTnUsersModel{
		conn:  conn,
		table: "`tn_users`",
	}
}

func (m *defaultTnUsersModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTnUsersModel) FindOne(ctx context.Context, id int64) (*TnUsers, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tnUsersRows, m.table)
	var resp TnUsers
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTnUsersModel) FindOneByEmail(ctx context.Context, email string) (*TnUsers, error) {
	var resp TnUsers
	query := fmt.Sprintf("select %s from %s where `email` = ? limit 1", tnUsersRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, email)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTnUsersModel) Insert(ctx context.Context, data *TnUsers) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, tnUsersRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Email, data.Password, data.PasswordSalt, data.Status)
	return ret, err
}

func (m *defaultTnUsersModel) Update(ctx context.Context, newData *TnUsers) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tnUsersRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Email, newData.Password, newData.PasswordSalt, newData.Status, newData.Id)
	return err
}

func (m *defaultTnUsersModel) tableName() string {
	return m.table
}
